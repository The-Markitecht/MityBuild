#!/usr/bin/env tclsh

source [file join [pwd] [file dirname [info script]] libMityBuild]

set testRecipes {
    # these recipes are wrapped in a big brace block for testing purposes.  that's not normal.

    recipe final {} {} run {}

    recipe toolsClang {} {
        # Clang toolchain settings for all recipes.  for clang with their libc++.
        # see recipe toolsCcDefault for explanations.
        export cc clang++  ;# Clang for the PC host's operating system.
        export ld $cc  ;# use same tool again for linking.
        export commonOptions [list -pipe -O$optim -g3 -Wall -fmessage-length=0 -fPIC]
        export sourceDependencyOptions [list -MMD -MT sources] ;# causes dumping source file dependency list into .d file.
        export cLanguageOptions [list {*}$commonOptions -c -xc++ -std=c++14 -stdlib=libc++ {*}$sourceDependencyOptions]
        export asmLanguageOptions [list {*}$commonOptions -c -xassembler-with-cpp {*}$sourceDependencyOptions]
        export linkerOptions [list {*}$commonOptions -std=c++14 -stdlib=libc++ -pthread]
        export libOptions [list -fpic -shared] ;# -rdynamic
    } run {}

    recipe emptyBuild {} {} run {}

    recipe testFileTree {} {} run {
        export testRoot [tempFilename]
        file mkdir $testRoot
        cd $testRoot
        file mkdir a
        cd a
        file mkdir b
        cd b
        file mkdir c
        file copy [f+ $::builderDir libMityBuild] c
        file mkdir d
        file copy [f+ $::builderDir libMityBuild] d
        cd d
        file mkdir e
        file copy [f+ $::builderDir libMityBuild] e
    }        

    recipe settings5 {} {} run {}
    
    recipe test5 {} {} run {
        # shorthand assignments with literals.
        a = 5
        assert {$a == 5}
        a := 5 * 10
        assert {$a == 50}
        # tolerate literal equal signs also.
        set s [list = 2]
        assert {$s == {= 2}}
        set s [list := 2]
        assert {$s == {:= 2}}
        # tolerate old-school arrays such as ::env.
        nums(five) = 5
        assert {$nums(five) == 5}
        nums(ten) := $nums(five) * 2
        assert {$nums(ten) == 10}
        # shorthand assignments with subst, but ensuring no extra passes.
        a = 5
        a = "mark$a"
        assert {$a eq {mark5}}
        a = {$nonexistent}
        assert {$a eq {$nonexistent}}        
        # shorthand indexing with literals.
        people = [dict create mark 40 julie 45 kids [dict create aiden 9 andrea 8]]
        assert {[people @ mark] == 40}
        assert {[people @ kids @ andrea] == 8}
        assert {[people @ kids @ jackie 3] == 3}
        lst = {zero one two three four}
        assert {[lst ^ 1] eq {one}}
        assert {[lst ^ 1 ^ end-1] eq {one two three}}
        # variables in expressions.
        a = 50
        i := $a / 5
        assert {$i == 10}
        i := $a/5
        assert {$i == 10}
        # variables in indices.
        kid = aiden
        assert {[people @ kids @ $kid] == 9}
        i = 3
        assert {[lst ^ end-$i] == {one}}
        # shorthand dict set.
        people @ bob = 48
        assert {[dict get $people bob] == 48}
        people @ kids @ sheldon = 10
        assert {[dict get $people kids sheldon] == 10}
        people @ kids @ leonard := [people @ kids @ sheldon] + 2
        assert {[dict get $people kids leonard] == 12}
        # ... with variable indices.
        name = siri
        people @ $name = 30
        assert {[people @ siri] == 30}
        people @ $name := [people @ $name] + 2
        assert {[people @ siri] == 32}
        # unknown command and var names.
        try {
            junkCommand
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {Invalid command name 'junkCommand'.  Did you mean to call a MityBuild recipe with 'require junkCommand'?}}
        }
        try {
            junkDict @ key
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {Dictionary variable was not found: junkDict}}
        }
        try {
            junkDict @ key @ subkey
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {Dictionary variable was not found: junkDict}}
        }
        try {
            junkList ^ pos
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {List variable was not found: junkList}}
        }
        try {
            junkList ^ pos ^ endPos
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {List variable was not found: junkList}}
        }
        # unknown dict keys
        try {
            people @ junkKey
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {key "junkKey" not known in dictionary}}
        }
        try {
            people @ junkKey @ junkSubkey
            assert 0 "This test should have trapped an error.  It executed instead."
        } trap {} {errText errDict} {
            assert {$errText eq {key "junkKey" not known in dictionary}}
        }
        # invalid list positions
        assert {[lst ^ 9000] eq {}}
        assert {[lst ^ -1] eq {}}
    }

    recipe settings7 {} {} run {}
    
    recipe test7 {} {} run {
        # speed tests for shorthand.
        d @ a = *
        
        s = {}
        begin = [clock clicks -milliseconds]
        for {i = 0} {$i < 20000} {incr i} {
            set s "$s[dict get $d a]"
        }
        baseline := [clock clicks -milliseconds] - $begin

        s = {}
        begin = [clock clicks -milliseconds]
        for {i = 0} {$i < 20000} {incr i} {
            s = "$s[d @ a]"
        }
        elapse := [clock clicks -milliseconds] - $begin

        tracer tests "shorthand $elapse ms"
        factor := double($elapse) / double($baseline)
        tracer tests "baseline $baseline ms = [format %0.1f $factor]x faster"
    }

    recipe settings18 {} {} run {}

    recipe test18 {} {} run {
        set fn {/media/android/Internal shared storage/Android/data/com.amazon.kindle/files/appexpan/nlnAssets_high_res/1/land/nln_brochure_card_2.jpg}
        set dest [remainder $fn {/media/android}]
        tracer tests "dest $dest"
        assert {$dest eq {Internal shared storage/Android/data/com.amazon.kindle/files/appexpan/nlnAssets_high_res/1/land/nln_brochure_card_2.jpg}}
    }

    recipe settings20 {} {} run {}

    recipe test20 {} {} run {
        require top
        assert {{paths} ni [info vars]}
    }

    recipe top {} {} run {
        set topvar isTop
        array set a {5 five}
        require second
        assert {$paths eq [list p1 p2]}
        require topsibling
    }

    recipe second {} {} run {
        assert {$topvar eq {isTop}}
        export paths [list p1]
        assert {$paths eq [list p1]}
        require third
        require sibling
        tracer tests "second paths $paths"
    }

    recipe third {} {} run {
        assert {$paths eq [list p1]}
        require fourth
        assert {$paths eq [list p1 p2]}
    }

    recipe fourth {} {} run {
        assert {$paths eq [list p1]}
        export+ paths p2
        assert {$paths eq [list p1 p2]}
    }

    recipe sibling {} {} run {
        assert {$paths eq [list p1 p2]}
    }

    recipe topsibling {} {} run {
        assert {$paths eq [list p1 p2]}
    }

    recipe settings25 {} {} run {}

    recipe test25 {} {} run {
        require testFileTree
        recurseDepthFirst $testRoot lib* [notHiddenPattern]  {
            x ls -l $fn
        }
        recurseBreadthFirst $testRoot lib* [notHiddenPattern]  {
            x ls -l $fn
        }
    }
    
    recipe settings30 {} {} run {}

    recipe test30 {} {} run {
        require testFileTree
        set myFiles [list]
        recurseDepthFirst $testRoot lib* [notHiddenPattern]  {
            # reversing order; this tests list manipulation on exported vars.
            export myFiles [linsert $myFiles 0 $fn]
        }
        tracer tests recurse:[llength $myFiles]:$myFiles
        assert {[llength $myFiles] == 3}
        assert {[myFiles ^ 0] == [f+ $testRoot a b d libMityBuild]}
    }

    recipe settings40 {} {} run {}

    recipe test40 {} {} run {
        require testFileTree
        cd $testRoot
        set f [open main.cpp w]
        puts $f {
            #include <iostream>
            int main(int argc, char* argv[]) {
                std::cout << "hello" << std::endl;
            }
        }
        close $f
        require toolsClang
        require compileAndLink testProgram linkExecutable $testRoot \
            [findFiles {*.cpp *.CPP} [notHiddenPattern] $testRoot] 
        assert {[file exists testProgram]}
        set output [x ./testProgram 2>@stderr <@stdin]
        assert {[string trim $output] eq {hello}}
    }

    recipe settings50 {} {} run {}

    recipe test50 {} {} run {
        # testing findFiles to verify it works.
        require testFileTree
        set allFns myOldFileList 
        set all [findFiles lib* [notHiddenPattern] $testRoot]
        tracer tests "found: $all"
        assert {[llength $all] == 3}    
        assert {$all eq [list  \
            [f+ $testRoot a b c libMityBuild]  \
            [f+ $testRoot a b d libMityBuild]  \
            [f+ $testRoot a b d e libMityBuild]  \
        ]}
        # also testing whether findFiles leaks an export of allFns.
        assert {$allFns eq {myOldFileList}}
    }

    recipe settings60 {} {
        require tools Clang
    } run {}

    recipe test60 {} {} run {
        assert {$cc eq {clang++}}
        require foreignLibraryTest
        assert {$cc eq {clang++}}
    }
    
    recipe foreignLibraryTest {} {} run {
        trapExports $toolVars
        assert {$cc eq {clang++}}
        require toolsForeign
        assert {$cc eq {special-gcc}}
        require compileForeign
    }
    
    recipe toolsForeign {} {
        export cc special-gcc
        assert {$cc eq {special-gcc}}
    } run {}
    
    recipe compileForeign {} {} run {
        assert {$cc eq {special-gcc}}
    }
    
    recipe settings70 {} {} run {}

    recipe test70 {} {} run {
        # test requireExports
        assert { ! [info exists lib70path]}
        assert { ! [info exists lib70ran]}
        local70 = localJunk
        lst = [list five eight seven]
        requireExports lib70 one two $lst
        assert {[info exists lib70path]}
        assert { ! [info exists lib70ran]}
        catch {unset lib70path}
        require lib70 one two $lst
        assert {[info exists lib70path]}
        assert {[info exists lib70ran]}
    }
    
    recipe lib70 {p1 p2 pList} {
        assert {$p1 eq {one}}
        assert {$p2 eq {two}}
        assert {$local70 eq {localJunk}}
        assert {$pList eq [list five eight seven]}
        export lib70path junk
    } run {
        export lib70ran junk
    }
    
}

puts stderr ===============================================
set i [lsearch -exact $::argv debug]
if {$i >= 0} {set debugNames [lindex $::argv ${i}+1]}
eval $testRecipes
for {set i 1} {$i < 1000} {incr i} {
    if [dict exists $::recipes test$i] {
        # re-initialize the builder library before each test.
        source [f+ $::builderDir libMityBuild]
        # define a batch of recipes required for this test.
        eval $testRecipes
        # artificially set command-line parameters.
        set ::argv [list \
            {trace tests asserts builderStack commands} \
            [list tracer tests "running test$i"] \
            test$i \
            [list tracer tests "passed test$i"]
        ]
        # execute the build, and trace the progress.
        if [info exists debugNames] {startDebug $debugNames}
        runMityBuild settings$i final CcDefault
    }
}

